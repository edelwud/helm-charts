# Default values for registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

registry:
  config:
    kind: ConfigMap
    labels: {}
    annotations: {}

    configVersion: 0.1

    # Structured config will completely overwrite content of unstructuredConfig
    structuredConfig: {}

    # Templated config for Distribution Registry
    # ref: https://distribution.github.io/distribution/about/configuration
    unstructuredConfig: |
      version: {{ .Values.registry.config.configVersion }}
      {{- include "registry.configLog" . }}
      {{- include "registry.storage" . }}
      http:
        {{ toYaml .Values.registry.http | nindent 2 }}
  # ref: https://distribution.github.io/distribution/about/configuration/#log
  log:
    accessLog:
      disabled: true
    level: debug
    formatter: json
    fields:
      releaseName: "{{ .Release.Name }}"
      appVersion: "{{ .Chart.AppVersion }}"
      chartVersion: "{{ .Chart.Version }}"
    hooksSettings:
      smtpCredentials:
        addr: mail.example.com:25
        username: mailuser
        password: password
        insecure: true
      hooks:
        # - type: mail
        #   disabled: true
        #   levels:
        #     - panic
        #   options:
        #     from: sender@example.com
        #     to:
        #       - errors@example.com
  storage:
    # should be one of filesystem, azure, gcs, s3, inmemory
    driver: filesystem

    # ref: https://distribution.github.io/distribution/storage-drivers/filesystem/
    filesystem:
      rootdirectory: /var/lib/registry

    # ref: https://distribution.github.io/distribution/storage-drivers/azure/
    azure:
      accountname: accountname
      accountkey: base64encodedaccountkey
      container: containername

    # ref: https://distribution.github.io/distribution/storage-drivers/gcs/
    gcs:
      bucket: bucketname
      keyfile: /path/to/keyfile
      credentials:
        type: service_account
        project_id: project_id_string
        private_key_id: private_key_id_string
        private_key: private_key_string
        client_email: client@example.com
        client_id: client_id_string
        auth_uri: http://example.com/auth_uri
        token_uri: http://example.com/token_uri
        auth_provider_x509_cert_url: http://example.com/provider_cert_url
        client_x509_cert_url: http://example.com/client_cert_url
      rootdirectory: /gcs/object/name/prefix

    # ref: https://distribution.github.io/distribution/storage-drivers/s3/
    # instead of providing access and secret keys directly here better to use
    # environment variables or service account irsa roles (AWS EKS only)
    s3:
      accesskey: awsaccesskey
      secretkey: awssecretkey
      region: us-west-1
      regionendpoint: http://myobjects.local
      forcepathstyle: true
      accelerate: false
      bucket: bucketname
      encrypt: true
      keyid: mykeyid
      secure: true
      v4auth: true
      chunksize: 5242880
      multipartcopychunksize: 33554432
      multipartcopymaxconcurrency: 100
      multipartcopythresholdsize: 33554432
      rootdirectory: /s3/object/name/prefix
      loglevel: debug

    # has no parameters
    # ref: https://distribution.github.io/distribution/storage-drivers/inmemory/
    inmemory:

    # ref: https://distribution.github.io/distribution/about/configuration/#maintenance
    maintenance:
      uploadpurging:
        enabled: true
        age: 168h
        interval: 24h
        dryrun: false
      readonly:
        enabled: false

    # ref: https://distribution.github.io/distribution/about/configuration/#delete
    delete:
      enabled: true

    # ref: https://distribution.github.io/distribution/about/configuration/#cache
    cache:
      blobdescriptor: inmemory
      blobdescriptorsize: 10000

    # ref: https://distribution.github.io/distribution/about/configuration/#tag
    tag:
      concurrencylimit: 8

    # ref: https://distribution.github.io/distribution/about/configuration/#redirect
    redirect:
      disable: true
  http:
    addr: 0.0.0.0:{{ .Values.service.port }}
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 5000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
